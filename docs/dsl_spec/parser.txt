Summary:
This module defines a recursive descent parser that converts token streams into structured AST nodes. It supports parsing of all DSL commands including \defvar, \define, \boundary, and \symmetry, and recursively parses nested mathematical expressions with proper operator precedence.

This parser is the bridge between raw token sequences and structured abstract syntax trees that higher-level modules can reason about.

Design Rationale:
Operator precedence and associativity are carefully implemented via recursive parsing layers (additive, multiplicative, power, primary).

Commands like \defvar and \define reflect real physics DSL usage (e.g., field equations).

Grammar supports prefix command notation and symbolic math.

Key Features:
Command parsing: \defvar, \define, \boundary, \symmetry

Expression parsing: numbers, identifiers, +, -, *, /, ^, parentheses

Error handling: raises SyntaxError with position-aware messages

Code:
(Excerpt below; complete in source)

python
Copy
Edit
# === Enhanced Parser with Expression Support ===
class Parser:
    def __init__(self, tokens: List[Token]):
        self.tokens = tokens
        self.pos = 0

    def peek(self): ...
    def match(self, expected_type): ...
    def expect(self, expected_type): ...

    def parse(self): ...
    def parse_defvar(self): ...
    def parse_define(self): ...
    def parse_expression(self): ...
    def parse_additive(self): ...
    def parse_multiplicative(self): ...
    def parse_power(self): ...
    def parse_primary(self): ...
    def parse_boundary(self): ...
    def parse_symmetry(self): ...
