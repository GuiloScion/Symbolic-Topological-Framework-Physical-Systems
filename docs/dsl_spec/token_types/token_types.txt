Summary:
This module defines the lexical tokens of the DSL using regular expressions. The compiler uses LaTeX-like syntax (e.g. \defvar, \define) to define physical systems. This file contains both the token vocabulary (TOKEN_TYPES) and the compiled token regex pattern used during scanning.

Each token maps to a semantic category in the language: commands, parentheses, operators, numbers, and identifiers. Importantly, tokens like COMMAND, LBRACE, and IDENT distinguish structure (syntax) from semantics (definitions).

Design Rationale:
The regex format mimics traditional compiler lexer design while adding readability. Each token class is defined by a named group, enabling easy integration with the Python re module's finditer.

Functionality:
TOKEN_TYPES: Core regex rules per token type.

token_regex: Combines named groups into one master pattern.

token_pattern: Precompiled regex object for performance.
