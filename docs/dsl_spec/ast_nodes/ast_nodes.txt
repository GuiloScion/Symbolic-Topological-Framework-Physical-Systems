Summary:
This module defines the Abstract Syntax Tree (AST) classes used to represent structured code once tokenized and parsed. Each class models a different construct in the DSL — such as variable definitions, expressions, operations, equations, and boundary/symmetry constraints. These nodes are the compiler's internal data model — every later step (type-checking, compilation, optimization) operates on these objects.

Design Rationale:
By defining clear Python classes for each language concept, the compiler gains:

Clarity: Each node semantically represents part of the DSL.

Extensibility: Adding new DSL constructs is as simple as defining new AST classes.

Pattern Matching: Enables simple isinstance checks in later compilation stages.

Functionality Overview:
Expression: Abstract base class.

NumberExpr, IdentExpr: Leaves of expression tree.

BinaryOpExpr, UnaryOpExpr: Recursive expression structures.

VarDef: Variable declarations with type and unit.

Op: Operator with arguments.

Define: Represents function definition: LHS operator = RHS expression.

Boundary, Symmetry: Domain-specific constraints.
