Summary:
This module introduces dimensional analysis into the language via the Unit class and a dictionary of canonical units (UNITS). It defines unit multiplication, division, exponentiation, and compatibility checks, enabling physical correctness enforcement (e.g., disallowing length + time).

Design Rationale:
In physics-based DSLs, ensuring that expressions are dimensionally consistent is critical. This module lays the foundation for unit-aware parsing and checking, allowing semantic errors to be caught during compilation.

Functionality:
Unit: Stores a dictionary mapping dimension names to integer exponents.

Arithmetic methods: Allow unit expressions to combine (e.g. Newtons = kg·m/s²).

UNITS: Predefined set including meters, seconds, kilograms, joules, etc.

Code:

class Unit:
    def __init__(self, dimensions: Dict[str, int]):
        self.dimensions = dimensions

    def __mul__(self, other):
        result = {}
        all_dims = set(self.dimensions) | set(other.dimensions)
        for dim in all_dims:
            result[dim] = self.dimensions.get(dim, 0) + other.dimensions.get(dim, 0)
        return Unit(result)

    def __truediv__(self, other):
        result = {}
        all_dims = set(self.dimensions) | set(other.dimensions)
        for dim in all_dims:
            result[dim] = self.dimensions.get(dim, 0) - other.dimensions.get(dim, 0)
        return Unit(result)

    def __pow__(self, exponent):
        return Unit({dim: exp * exponent for dim, exp in self.dimensions.items()})

    def is_compatible(self, other):
        return self.dimensions == other.dimensions

    def __repr__(self):
        return f"Unit({self.dimensions})"

# Standard units
UNITS = {
    "meter": Unit({"length": 1}),
    "m": Unit({"length": 1}),
    "second": Unit({"time": 1}),
    "s": Unit({"time": 1}),
    "kilogram": Unit({"mass": 1}),
    "kg": Unit({"mass": 1}),
    "kelvin": Unit({"temperature": 1}),
    "K": Unit({"temperature": 1}),
    "dimensionless": Unit({}),
    "1": Unit({}),
    "energy": Unit({"mass": 1, "length": 2, "time": -2}),
    "force": Unit({"mass": 1, "length": 1, "time": -2}),
}
