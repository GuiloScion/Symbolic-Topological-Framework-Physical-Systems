Summary:
This module defines a recursive descent parser that converts token streams into structured AST nodes. It supports parsing of all DSL commands including \defvar, \define, \boundary, and \symmetry, and recursively parses nested mathematical expressions with proper operator precedence.

This parser is the bridge between raw token sequences and structured abstract syntax trees that higher-level modules can reason about.

Design Rationale:
Operator precedence and associativity are carefully implemented via recursive parsing layers (additive, multiplicative, power, primary).

Commands like \defvar and \define reflect real physics DSL usage (e.g., field equations).

Grammar supports prefix command notation and symbolic math.

Key Features:
Command parsing: \defvar, \define, \boundary, \symmetry

Expression parsing: numbers, identifiers, +, -, *, /, ^, parentheses

Error handling: raises SyntaxError with position-aware messages
